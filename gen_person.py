# take user input to help generate a person
# i wrote this in a few minutes so apologies for code quality

# TODO condense gen/print maybe
# TODO make more info optional as args

import argparse
from faker import Faker
from faker_nonbinary.faker_nonbinary import Provider as NonbinaryProvider
from random import choice, randint


def gen_person(gender: str, age_group=None):
    """generate a person and gather some additional info"""
    if gender == "f":
        name = fake.name_female()
        name = give_prefix(name, "f")
        name = give_suffix(name, "f")
    elif gender == "m":
        name = fake.name_male()
        name = give_prefix(name, "m")
        name = give_suffix(name, "m")
    else:
        # 25% chance to skip the last name (it usually sounds really cool)
        if randint(1, 4) > 3:
            name = fake.real_name_nonbinary()
            name = give_prefix(name, "n")
        else:
            name = f"{fake.real_name_nonbinary()} {fake.last_name()}"
            name = give_prefix(name, "n")
            name = give_suffix(name, "n")

    company = fake.company()
    job = fake.job()

    if age_group:
        age = give_age(age_group)
        return name, company, job, age
    else:
        return name, company, job


def give_age(age_group: str):
    """give an npc an age"""
    # age ranges for pilot licenses
    if age_group == "young":
        return randint(24, 39)
    elif age_group == "middle":
        return randint(40, 55)
    elif age_group == "old":
        return randint(55, 75)
    else:
        return None


def give_prefix(name: str, gender: str):
    """12.5\% chance to assign a prefix to a name"""
    prefix_chance = randint(1, 8)
    if prefix_chance > 4:
        if gender == "f":
            name = f"{fake.prefix_female()} {name}"
        elif gender == "m":
            name = f"{fake.prefix_male()} {name}"
        else:
            name = f"{fake.prefix_nonbinary()} {name}"
        return name
    else:
        return name


def give_suffix(name: str, gender: str):
    """12.5\% chance to assign a suffix to a name"""
    suffix_chance = randint(1, 8)
    if suffix_chance > 4:
        if gender == "f":
            name = f"{name} {fake.suffix_female()}"
        elif gender == "m":
            name = f"{name} {fake.suffix_male()}"
        else:
            name = f"{name} {fake.suffix_nonbinary()}"
        return name
    else:
        return name


def print_person(name: str, company: str, job: str, age=None):
    """print the person generated by gen_person"""
    print(f"\n{name}")
    print("=" * len(name))
    if age:
        print(f"- Age: {age}")
    print(f"- Company: {company}")
    print(f"- Job: {job}\n")


# TODO this is messy
def main():
    """generate an npc with provided gender"""
    parser = argparse.ArgumentParser()

    # cannot select more than one gender (not irl, just for name)
    gender_group = parser.add_mutually_exclusive_group(required=False)
    gender_group.add_argument(
        "-w", "--woman", help="generate a female npc", action="store_true",
    )
    gender_group.add_argument(
        "-n", "--nonbinary", help="generate a nonbinary npc", action="store_true"
    )
    gender_group.add_argument(
        "-m", "--man", help="generate a male npc", action="store_true"
    )
    gender_group.add_argument(
        "-r", "--random", help="create a randomized npc (default)", action="store_true",
    )

    # group for age ranges to pass to functions
    age_group = parser.add_mutually_exclusive_group()
    age_group.add_argument("--young", help="create a younger npc", action="store_true")
    age_group.add_argument(
        "--middle", help="create a middle-aged npc", action="store_true"
    )
    age_group.add_argument("--old", help="create an old npc", action="store_true")

    args = parser.parse_args()

    # if random is given, ignore all other flags and generate npc with random params
    if args.random:
        age_group = choice(["young", "middle", "old"])
        gender = choice(["f", "n", "m"])
        name, company, job, age = gen_person(gender, age_group)
        print_person(name, company, job, age)
        exit(0)

    # since age_group is optional during generation, a None value won't break the func
    if args.young:
        age_group = "young"
    elif args.middle:
        age_group = "middle"
    elif args.old:
        age_group = "old"
    else:
        age_group = None

    if args.woman:
        gender = "f"
    elif args.nonbinary:
        gender = "n"
    elif args.man:
        gender = "m"
    else:
        gender = None

    if age_group:
        name, company, job, age = gen_person(gender, age_group)
        print_person(name, company, job, age)
        exit(0)
    else:
        if gender:
            name, company, job = gen_person(gender)
            print_person(name, company, job)
            exit(0)
        else:
            age_group = choice(["young", "middle", "old"])
            gender = choice(["f", "n", "m"])
            name, company, job, age = gen_person(gender, age_group)
            print_person(name, company, job, age)
            exit(0)


fake = Faker("en_us")
fake.add_provider(NonbinaryProvider)

if __name__ == "__main__":
    main()
